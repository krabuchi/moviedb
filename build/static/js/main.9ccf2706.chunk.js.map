{"version":3,"sources":["components/movieDetail.module.css","components/movieList.module.css","imdb.png","components/Search.js","components/MovieList.js","components/reducer.js","components/MovieDetails.js","components/useDataApi.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Search","query","setQuery","doFetch","history","useHistory","Navbar","bg","variant","expand","Brand","href","Form","inline","onSubmit","e","preventDefault","push","style","formStyle","FormControl","type","placeholder","className","value","onChange","target","Button","width","margin","display","justifyContent","MovieList","movies","data","map","movie","key","id","to","textDecoration","color","styles","li","Card","Img","src","poster_path","alt","title","Body","Title","ul","CardDeck","dataFetchReducer","state","action","isLoading","isError","payload","Error","MovieDetails","useParams","initialUrl","initialData","useState","url","setUrl","useReducer","dispatch","useEffect","didCancel","a","axios","result","fetchData","useDataApi","console","log","container","imgContainer","details","overview","release_date","vote_average","imdb_id","imdb","height","genres","el","genre","name","get","App","exact","path","render","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9ccf2706.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"movieDetail_container__2ZxW7\",\"imgContainer\":\"movieDetail_imgContainer__gAaYR\",\"details\":\"movieDetail_details__1Yy_b\",\"genre\":\"movieDetail_genre__3yzix\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ul\":\"movieList_ul__2Ev--\",\"li\":\"movieList_li__1cZbI\",\"title\":\"movieList_title__30Ner\"};","module.exports = __webpack_public_path__ + \"static/media/imdb.09df7b22.png\";","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { Button, Form, FormControl, Navbar } from \"react-bootstrap\";\n\nexport const Search = ({ query, setQuery, doFetch }) => {\n  const handleFormSubmit = (e) => {\n    e.preventDefault();\n    if (query === \"\") return;\n    doFetch(\n      `https://moviedb-backend.herokuapp.com/api/movies/search?q=${query}`\n    );\n    history.push(\"/\");\n  };\n\n  let history = useHistory();\n\n  return (\n    <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\n      <Navbar.Brand href=\"/\">TheMovieDB</Navbar.Brand>\n      <Form inline onSubmit={handleFormSubmit} style={formStyle}>\n        <FormControl\n          type=\"text\"\n          placeholder=\"Search\"\n          className=\"mr-sm-2\"\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n        />\n        <Button variant=\"outline-success\" type=\"submit\">\n          Search\n        </Button>\n      </Form>\n    </Navbar>\n  );\n};\n\nconst formStyle = {\n  width: \"100%\",\n  margin: \"10px\",\n  display: \"flex\",\n  justifyContent: \"center\",\n};\n","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport styles from './movieList.module.css';\n\nimport { CardDeck, Card } from 'react-bootstrap';\n\nconst MovieList = ({ data }) => {\n    let movies = data.map( movie => {\n        return (\n            <Link key={movie.id} \n                to={`movie/${movie.id}`} \n                style={{textDecoration: 'none', color: '#111'}}\n            >\n                <li className={styles.li}>\n                    <Card style={{ width: '15rem', margin: '1rem' }}>\n                        <Card.Img \n                            variant=\"top\" \n                            src={`https://image.tmdb.org/t/p/w500${movie.poster_path}`}  \n                            alt={movie.title}\n                        />\n                        <Card.Body>\n                            <Card.Title>\n                                <span className={styles.title}>{movie.title}</span> \n                            </Card.Title>\n                        </Card.Body>\n                    </Card>\n                </li>\n            </Link>\n    )});\n\n    return (\n        <ul className={styles.ul}>\n            <CardDeck>\n                {movies}\n            </CardDeck>\n        </ul>\n    );\n}\nexport default MovieList;","export const dataFetchReducer = (state, action) => {\n    switch(action.type) {\n        case \"FETCH_INIT\":\n            return {...state, isLoading: true, isError: false};\n\n        case \"FETCH_SUCCESS\":\n            return { \n                ...state, \n                isLoading: false, \n                isError: false, \n                data: action.payload\n            };\n\n        case \"FETCH_FAILURE\": \n            return {...state, isLoading: false, isError: true};\n            \n        default: \n            throw new Error();\n    }\n}","import React, { useState, useEffect, useReducer } from \"react\";\nimport axios from \"axios\";\n\nimport { useParams } from \"react-router-dom\";\nimport { dataFetchReducer } from \"./reducer\";\n\nimport styles from \"./movieDetail.module.css\";\nimport imdb from \"../imdb.png\";\n\nconst useDataApi = (initialUrl, initialData) => {\n  const [url, setUrl] = useState(initialUrl);\n\n  const [state, dispatch] = useReducer(dataFetchReducer, {\n    isLoading: false,\n    isError: false,\n    data: initialData,\n  });\n\n  useEffect(() => {\n    let didCancel = false;\n\n    const fetchData = async () => {\n      dispatch({ type: \"FETCH_INIT\" });\n\n      try {\n        const result = await axios(url);\n\n        if (!didCancel) {\n          dispatch({ type: \"FETCH_SUCCESS\", payload: result.data });\n        }\n      } catch (error) {\n        if (!didCancel) {\n          dispatch({ type: \"FETCH_FAILURE\" });\n        }\n      }\n    };\n\n    fetchData();\n\n    return () => {\n      didCancel = true;\n    };\n  }, [url]);\n\n  return [state, setUrl];\n};\n\nfunction MovieDetails({}) {\n  let { id } = useParams();\n  const url = `https://moviedb-backend.herokuapp.com/api/movies/${id}`;\n  const [{ data, isLoading, isError }, doFetch] = useDataApi(url, {});\n  console.log(data);\n  return (\n    <>\n      {isError && <div>Something went wrong!!</div>}\n      {isLoading ? (\n        <div>Loading....</div>\n      ) : (\n        <div className={styles.container}>\n          <div className={styles.imgContainer}>\n            <img\n              src={`https://image.tmdb.org/t/p/w500${data.poster_path}`}\n              alt={data.title}\n            />\n          </div>\n          <div className={styles.details}>\n            <h1>{data.title}</h1>\n            <p>{data.overview}</p>\n            <p>\n              <span>Release Date: </span>\n              {data.release_date}\n            </p>\n            <p>\n              <span>Rating: </span>\n              {data.vote_average}\n            </p>\n            <p>\n              <a\n                href={`https://www.imdb.com/title/${data.imdb_id}`}\n                target=\"_blank\"\n              >\n                <img src={imdb} alt=\"imdb-link\" height=\"60\" />\n              </a>\n            </p>\n            {data.genres &&\n              data.genres.map((el) => (\n                <span className={styles.genre} key={el.id}>\n                  {el.name}\n                </span>\n              ))}\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n\nexport default MovieDetails;\n","import { useReducer, useState, useEffect } from \"react\";\nimport { dataFetchReducer } from \"./reducer\";\nimport axios from \"axios\";\n\nconst useDataApi = (initialUrl, initialData) => {\n  const [state, dispatch] = useReducer(dataFetchReducer, {\n    isLoading: false,\n    isError: false,\n    data: initialData,\n  });\n  const [url, setUrl] = useState(initialUrl);\n\n  useEffect(() => {\n    let didCancel = false;\n\n    const fetchData = async () => {\n      dispatch({ type: \"FETCH_INIT\" });\n      try {\n        const result = await axios.get(url);\n        if (!didCancel) {\n          dispatch({\n            type: \"FETCH_SUCCESS\",\n            payload: result.data,\n          });\n        }\n      } catch (error) {\n        if (!didCancel) {\n          dispatch({ type: \"FETCH_FAILURE\" });\n        }\n      }\n    };\n    fetchData();\n    return () => {\n      didCancel = true;\n    };\n  }, [url]);\n  return [state, setUrl];\n};\n\nexport default useDataApi;\n","import React, { useState } from \"react\";\n\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport \"./App.module.css\";\n\nimport { Search } from \"./components/Search\";\nimport MovieList from \"./components/MovieList\";\nimport MovieDetails from \"./components/MovieDetails\";\nimport useDataApi from \"./components/useDataApi\";\n\nconst App = () => {\n  const [query, setQuery] = useState(\"\");\n\n  const [{ data, isLoading, isError }, doFetch] = useDataApi(\n    `https://moviedb-backend.herokuapp.com/api/movies`,\n    []\n  );\n  return (\n    <Router>\n      <Search doFetch={doFetch} query={query} setQuery={setQuery} />\n\n      {isError && <div>Something went wrong!!</div>}\n\n      {isLoading ? (\n        <div>Loading....</div>\n      ) : (\n        <Switch>\n          <Route\n            exact\n            path=\"/moviedb\"\n            render={() => <MovieList data={data} />}\n          />\n          <Route exact path=\"/moviedb/movie/:id\" component={MovieDetails} />\n        </Switch>\n      )}\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: {'Service-Worker': 'script'},\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}